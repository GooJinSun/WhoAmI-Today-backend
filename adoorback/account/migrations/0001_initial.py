# Generated by Django 3.2.13 on 2024-02-09 07:34

import account.models
import adoorback.utils.validators
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 20 characters or fewer. Letters (alphabet & 한글), digits and _ only.', max_length=20, unique=True, validators=[adoorback.utils.validators.AdoorUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('question_history', models.CharField(max_length=500, null=True)),
                ('profile_pic', models.CharField(default=account.models.random_profile_color, max_length=7)),
                ('profile_image', models.ImageField(blank=True, null=True, storage=account.models.OverwriteStorage(), upload_to=account.models.to_profile_images)),
                ('gender', models.IntegerField(choices=[(0, '여성'), (1, '남성'), (2, '트랜스젠더 (transgender)'), (3, '논바이너리 (non-binary/non-conforming)'), (4, '응답하고 싶지 않음')], null=True)),
                ('date_of_birth', models.DateField(null=True)),
                ('ethnicity', models.IntegerField(choices=[(0, '미국 원주민/알래스카 원주민 (American Indian/Alaska Native)'), (1, '아시아인 (Asian)'), (2, '흑인/아프리카계 미국인 (Black/African American)'), (3, '히스패닉/라틴계 미국인 (Hispanic/Latino)'), (4, '하와이 원주민/다른 태평양 섬 주민 (Native Hawaiian/Other Pacific Islander)'), (5, '백인 (White)')], null=True)),
                ('nationality', django_countries.fields.CountryField(max_length=2, null=True)),
                ('research_agreement', models.BooleanField(default=False)),
                ('signature', models.CharField(max_length=100, null=True)),
                ('date_of_signature', models.DateField(null=True)),
                ('language', models.CharField(choices=[('ko', '한국어'), ('en', '영어')], default='ko', max_length=10)),
                ('timezone', models.CharField(default='America/Los_Angeles', max_length=50)),
                ('noti_time', models.TimeField(default=datetime.time(16, 0))),
                ('pronouns', models.CharField(max_length=30, null=True)),
                ('bio', models.CharField(max_length=120, null=True)),
                ('favorites', models.ManyToManyField(blank=True, related_name='favorite_of', to=settings.AUTH_USER_MODEL)),
                ('friends', models.ManyToManyField(blank=True, related_name='_account_user_friends_+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('hidden', models.ManyToManyField(blank=True, related_name='hidden_by', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['id'],
            },
            managers=[
                ('objects', account.models.UserCustomManager()),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('accepted', models.BooleanField(null=True)),
                ('requestee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_friend_requests', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_friend_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='FriendGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('name', models.CharField(max_length=30)),
                ('order', models.IntegerField(default=0)),
                ('friends', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlockRec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_block_recs', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_recs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='friendrequest',
            index=models.Index(fields=['-updated_at'], name='account_fri_updated_eb691a_idx'),
        ),
        migrations.AddConstraint(
            model_name='friendrequest',
            constraint=models.UniqueConstraint(condition=models.Q(('deleted__isnull', True)), fields=('requester', 'requestee'), name='unique_friend_request'),
        ),
        migrations.AddConstraint(
            model_name='blockrec',
            constraint=models.UniqueConstraint(condition=models.Q(('deleted__isnull', True)), fields=('user', 'blocked_user'), name='unique_block_rec'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['id'], name='account_use_id_ef0f90_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='account_use_usernam_19aad5_idx'),
        ),
    ]
